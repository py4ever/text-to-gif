#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Author : LeiXueWei
# @CSDN/Juejin/Wechat: 雷学委
# @PypiSeedTag: Main
# @File : main.py
# @Project : text-to-gif


"""
generated by PypiSeed(PPC) - Main Program
"""
import argparse
import logging
import os

from text_to_gif.env_options import skip_user_doc_load
from text_to_gif.text2gif import text2gif, textfolder2gif

THE_DEFAULT_INPUTS = ["input.txt", "usage_doc.txt"]
THE_DEFAULT_FILE_POSTFIXS = [".txt", ".log"]
THE_DEFAULT_FRAME_SIZE = 3


def main():
    parser = argparse.ArgumentParser(
        description="Please provide params to call t2g(text-to-gif) or just run it to generate usage_doc.gif")
    parser.add_argument('--input', '-i', default="input.txt",
                        help="tell t2g where is the (long)text input file path, default is 'input.txt'(load first) or 'usage_doc.txt' ")
    parser.add_argument('--output', '-o', default="usage_doc.gif",
                        help="tell t2g where to store the output gif, default is 'usage_doc.gif'")
    parser.add_argument('--duration', '-d', default=0.66, type=float,
                        help="the duration of output gif, 0.66 as default")
    parser.add_argument('--frame', '-f', default=3, type=int,
                        help="tell t2g how many frame to structure the long text into multi-frame in output gif, 3 as default")
    parser.add_argument('--verbose', '-v', action='store_const', const=True, help="show more verbose info(optional)")
    args = parser.parse_args()
    long_text_path = args.input
    usage_doc_loaded = False
    verbose = args.verbose
    if verbose is None:
        verbose = False

    if long_text_path and long_text_path not in THE_DEFAULT_INPUTS:
        # so current user has specific the input file and not in any default input
        if not os.path.exists(long_text_path):
            raise ValueError("The input file does not exist, path:" + long_text_path)
    elif not os.path.exists(long_text_path):
        if skip_user_doc_load():
            raise ValueError("The input file does not exist, path:" + long_text_path)
        else:
            usage_doc_path = "usage_doc.txt"
            if os.path.exists(usage_doc_path):
                usage_doc_loaded = True
                long_text_path = usage_doc_path
            else:
                raise ValueError("The input file does not exist, path:" + long_text_path)
    frame_size = args.frame
    if frame_size <= 0:
        print("Invalid frame size(should be at least 1 or more.")
        return
    duration = args.duration
    if duration <= 0:
        print("Invalid duration(must > 0)")
        return
    output = args.output
    if verbose:
        print("input:%s, output:%s with frame:%s duration %s" %
              (long_text_path, output, frame_size, duration))

    if os.path.isfile(long_text_path):
        text2gif(long_text_path, frame_size, output, verbose, duration)
    else:
        all_text_files = collect_text_files(long_text_path)
        if len(all_text_files) == 0:
            if verbose:
                print("no text(*.txt) files or log(*.log) files")
            return
        all_text_files = all_text_files[0:frame_size]
        frame_size = len(all_text_files)
        all_text_files.sort()
        textfolder2gif(all_text_files, frame_size, output, verbose, duration)


def collect_text_files(text_file_dir):
    files = os.listdir(text_file_dir)
    all_text_files = []
    for postfix in THE_DEFAULT_FILE_POSTFIXS:
        for f in files:
            if f.endswith(postfix):
                full_name = os.path.join(text_file_dir, f)
                all_text_files.append(full_name)
        file_number = len(all_text_files)
        if file_number > 0:
            return all_text_files
    return all_text_files


if __name__ == '__main__':
    main()
